apiVersion: tekton.dev/v1
kind: Task
metadata:
  name: sign-image
spec:
  workspaces:
    - name: environment
      description: Workspace to store environment files
  params:
    - name: tas-env-vars
      type: string
      description: Base64 encoded results
    - name: IMAGE
      type: string
  volumes:
  - name: registry-auth
    secret:
      secretName: {{ include "parasol-store-build.name" . }}-registry-creds

  steps:
  - name: sign-image
    image: 'quay.io/tssc_demos/skopeo-jq:20250918'
    volumeMounts:
    - name: registry-auth
      mountPath: /home/cosign/.docker
      readOnly: true
    env:
    - name: KEYCLOAK_USERNAME
      valueFrom:
        secretKeyRef:
          name: signing-user
          key: username
    - name: KEYCLOAK_PASSWORD
      valueFrom:
        secretKeyRef:
          name: signing-user
          key: password
    script: |
      #!/bin/bash
      #set -e
      # Colors for output
      RED='\033[0;31m'
      GREEN='\033[0;32m'
      YELLOW='\033[1;33m'
      NC='\033[0m' # No Color

      # Function to print colored output
      print_status() {
          echo -e "${GREEN}[INFO]${NC} $1"
      }

      print_warning() {
          echo -e "${YELLOW}[WARN]${NC} $1"
      }

      print_error() {
          echo -e "${RED}[ERROR]${NC} $1"
      }


      echo "$(params.tas-env-vars)" | base64 -d > /tmp/tas-env.sh
      source /tmp/tas-env.sh

      print_status "TAS environment variables initialized:"
      
      print_status "TUF URL: $TUF_URL"
      print_status "OIDC Issuer URL: $OIDC_ISSUER_URL"
      print_status "Fulcio URL: $COSIGN_FULCIO_URL"
      print_status "Rekor URL: $COSIGN_REKOR_URL"
      print_status "COSIGN CLI URL: $COSIGN_CLI_URL"
      print_status "GITSIGN CLI URL: $GITSIGN_CLI_URL"
      print_status "COSIGN_OIDC_CLIENT_ID: $COSIGN_OIDC_CLIENT_ID"
      
      cd $(workspaces.environment.path)
      pwd

      # Download CLI binaries 
      
      print_status "Downloading cosign..."
      if ! curl -fsSL -o "$(basename "$COSIGN_CLI_URL")" "$COSIGN_CLI_URL"; then
          print_error "Failed to download cosign from $COSIGN_CLI_URL"
          exit 1
      fi

      # Extract and install cosign
      print_status "Installing cosign..."
      if ! gunzip cosign-amd64.gz; then
          print_error "Failed to extract cosign-amd64.gz"
          exit 1
      fi
      
      chmod +x cosign-amd64
      
      if ! mv cosign-amd64 cosign; then
          print_error "Failed to install cosign"
          exit 1
      fi
      
      #adding the clis to the PATH
      export PATH="$(workspaces.environment.path):$PATH"
      print_status "CLI installation completed successfully!"
      cosign initialize

      echo "Authenticating to Keycloak..."
      TOKEN_ENDPOINT="$OIDC_ISSUER_URL/protocol/openid-connect/token"
      echo "TOKEN ENDPOINT: $TOKEN_ENDPOINT"


      # Get OIDC token using direct grant flow
      TOKEN_RESPONSE=$(curl -s -X POST "$TOKEN_ENDPOINT" \
        -H "Content-Type: application/x-www-form-urlencoded" \
        -d "grant_type=password" \
        -d "username=${KEYCLOAK_USERNAME}" \
        -d "password=${KEYCLOAK_PASSWORD}" \
        -d "client_id=$COSIGN_OIDC_CLIENT_ID" \
        -d "scope=openid email profile")
      
      # Extract access token
      ACCESS_TOKEN=$(echo "$TOKEN_RESPONSE" | jq -r '.access_token')
      EXPIRES_IN=$(echo "$TOKEN_RESPONSE" | jq -r '.expires_in')

      echo $TOKEN_RESPONSE

      export SIGSTORE_ID_TOKEN="$ACCESS_TOKEN"
      
      echo "Signing image: $(params.IMAGE)"
      echo "Using OIDC Issuer: $COSIGN_OIDC_ISSUER"
      
      # Perform keyless signing
      cosign sign $(params.IMAGE)
      
      echo "Image signing completed successfully"
